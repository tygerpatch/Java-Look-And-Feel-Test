class Panel
 add radio buttons
 add panel to private JFrame

 listen for radio button
  update Look N Feel manager
  create new JFrame 
  add panel to JFrame


public class LookNFeel extends JPanel implements ActionListener
{
 private JRadioButton optMetal;
 private JRadioButton optMotif;
 private JRadioButton optWindows;

 public LookNFeel()
 {
  create_JRadioButtons;
  set_ActionCommand_JRadioButtons();
  add_ActionListeners_JRadioButtons();
  set_constraints_JRadioButtons();
  add_JRadioButtons();
 }

 private void create_JRadioButtons()
 {
  optMetal = new JRadioButton("Metal");
  optMotif = new JRadioButton("Motif");
  optWindows = new JRadioButton("Windows");
 }

 private void set_ActionCommand_JRadioButtons()
 {
  optMetal.setActionCommand("Metal");
  optMotif.setActionCommand("Motif");
  optWindows.setActionCommand("Windows");
 }

 private void add_ActionListeners_JRadioButtons()
 {
  optMetal.addActionListener( this );
  optMotif.addActionListener( this );
  optWindows.addActionListener( this );
 }

 private void set_constraints_JRadioButtons()
 {
  gridBag.setConstraints( optMetal, gridConst );
  gridBag.setConstraints( optMotif, gridConst );
  gridBag.setConstraints( optWindows, gridConst );
 }

 private void add_JRadioButtons()
 {
  add( optMetal );
  add( optMotif );
  add( optWindows );
 }






   // set layout manager for JPanel
   setLayout( gridBag );







   /*
   "When a modal dialog is visible, 
    it blocks user input to all other windows in the program."

   ( "How to Make Dialogs", 
      <http://java.sun.com/docs/books/tutorial/uiswing/components/dialog.html> )
   */

   // JDialog(Frame owner, boolean modal) 
   super( LookNFeel.this.frm, true );

   // Close Dialog Box when user clicks on close button
   setDefaultCloseOperation( javax.swing.JDialog.EXIT_ON_CLOSE ); 

   setVisible( true );

   // Create layout manager
   GridBagLayout gridBag = new GridBagLayout();

   // Create constraint
   GridBagConstraints gridConst = new GridBagConstraints(); 

   // Create inset
   // Insets(int top, int left, int bottom, int right)
   Insets ins = new Insets(10, 10, 10, 10);

   // Set fields for constraint
   /*
    "This field specifies the external padding of
      the component, the minimum amount of space 
      between the component and the edges of its
      display area." (java.awt.GridBagConstraints, Documenation)
   */
   gridConst.insets = ins;











 public void actionPerformed(ActionEvent evt)
 {
 }

 public static void(String[] args)
 {
 }
}















import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.UIManager;
import javax.swing.JRadioButton;
import javax.swing.SwingUtilities;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.Insets;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;

public class LookNFeel
{
 private JFrame frm;

 public LookNFeel()
 {
//  frm = new LNF_Frame();
  frm = new JFrame("Hello World");

  frm.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); 
  frm.setSize(100, 100);
  frm.setVisible( true );

  JDialog dialog = new LNF_Dialog();
 }
 
 private class LNF_Frame extends JFrame implements ActionListener
 {
  public LNF_Frame()
  {   
   // Create layout manager
   GridBagLayout gridBag = new GridBagLayout();

   // Create constraint
   GridBagConstraints gridConst = new GridBagConstraints();

   // Create inset
   // Insets(int top, int left, int bottom, int right)
   Insets ins = new Insets(10, 10, 10, 10);

   // Set fields for constraint
   /*
    "This field specifies the external padding of
      the component, the minimum amount of space 
      between the component and the edges of its
      display area." (java.awt.GridBagConstraints, Documenation)
   */
   gridConst.insets = ins;

   // Create button
   JButton btnChange = new JButton("CHANGE");

   // Set constraints
   gridBag.setConstraints(btnChange, gridConst);

   // set layout manager for JPanel
   setLayout( gridBag );

   // Add Component
   add( btnChange );
  }

  public void actionPerformed(ActionEvent evt)
  {
   JDialog dialog = new LNF_Dialog();
  
   frm = new LNF_Frame();

   frm.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); 
   frm.setVisible( true );
  }
 }

 private class LNF_Dialog extends JDialog implements ActionListener
 {
  LNF_Dialog()
  {
   /*
   "When a modal dialog is visible, 
    it blocks user input to all other windows in the program."

   ( "How to Make Dialogs", 
      <http://java.sun.com/docs/books/tutorial/uiswing/components/dialog.html> )
   */

   // JDialog(Frame owner, boolean modal) 
   super( LookNFeel.this.frm, true );

   // Close Dialog Box when user clicks on close button
   setDefaultCloseOperation( javax.swing.JDialog.EXIT_ON_CLOSE ); 

   setVisible( true );

   // Create layout manager
   GridBagLayout gridBag = new GridBagLayout();

   // Create constraint
   GridBagConstraints gridConst = new GridBagConstraints(); 

   // Create inset
   // Insets(int top, int left, int bottom, int right)
   Insets ins = new Insets(10, 10, 10, 10);

   // Set fields for constraint
   /*
    "This field specifies the external padding of
      the component, the minimum amount of space 
      between the component and the edges of its
      display area." (java.awt.GridBagConstraints, Documenation)
   */
   gridConst.insets = ins;

   // Create JRadioButtons
   JRadioButton optMetal = new JRadioButton("Metal");
   JRadioButton optMotif = new JRadioButton("Motif");
   JRadioButton optWindows = new JRadioButton("Windows");

   // Set constraints
   gridBag.setConstraints( optMetal, gridConst );
   gridBag.setConstraints( optMotif, gridConst );
   gridBag.setConstraints( optWindows, gridConst );

   // set layout manager for JPanel
   setLayout( gridBag );

   // Set Action Command for JRadioButtons
   optMetal.setActionCommand("Metal");
   optMotif.setActionCommand("Motif");
   optWindows.setActionCommand("Windows");

   // Add ActionListeners to JRadioButtons
   optMetal.addActionListener( this );
   optMotif.addActionListener( this );
   optWindows.addActionListener( this );

   // Add Component
   add( optMetal );
   add( optMotif );
   add( optWindows );
  }

  public void actionPerformed(ActionEvent evt)
  {
   String cmd = evt.getActionCommand();
   String lnf;
   
   if( cmd == "Metal" )
    lnf = new String("javax.swing.plaf.metal.MetalLookAndFeel");
   else
   {
    if( cmd == "Motif" )
     lnf = new String("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
    else
     lnf = new String("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
   }

   /*
    "How to Set the Look and Feel", The Java Tutorial, Sun Microsystems
    http://java.sun.com/docs/books/tutorial/uiswing/misc/plaf.html

    UIManager records which Look and Feel to use
    SwingUtitilites changes components to the current Look and Feel 
   */
   try
   {
    /*
     "Sets the current default look and feel using a class name"
     (javax.swing.UIManager, Documenation)
    */
    UIManager.setLookAndFeel( lnf );

    /*
     "A simple minded look and feel change: ask each node in the tree to
      updateUI() -- that is, to initialize its UI property with the current
      look and feel."
      
      (javax.swing.SwingUtilities, Documenation)
    */
   }
   catch(Exception e)
   {
    /*
     All four exceptions that UIManager.setLookAndFeel throws
      are subclasses of Exception. Exception type exceptions are checked.
     
     "ClassNotFoundException - if the LookAndFeel class could not be found 
     InstantiationException - if a new instance of the class couldn't be created 
     IllegalAccessException - if the class or initializer isn't accessible 
     UnsupportedLookAndFeelException - if lnf.isSupportedLookAndFeel() is false"
    */
    e.printStackTrace();
   }
  }
 }


 public static void main(String[] args)
 {
  LookNFeel lnf = new LookNFeel();
 }
}
